"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const { check, validationResult } = require("express-validator");
const clickPost = require("../models/clickPost");
const clickRouter = express_1.default.Router();
const auth = require('../middlewares/auth');
const Users = require('../models/user');
clickRouter.route('/')
    .get(auth.required, async (req, res, next) => {
    try {
        await clickPost.find({})
            .then((clicks) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(clicks);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .post(auth.required, async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    try {
        const newPost = new clickPost({
            user: req.payload.id,
            description: req.body.description,
            title: req.body.title,
            img: req.body.img,
            time: Date.now(),
        });
        const post = await newPost.save();
        res.json(post);
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
clickRouter.route('/:id')
    .get(auth.required, async (req, res, next) => {
    try {
        await clickPost.findById(req.params.id)
            .then((click) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(click);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            if (click.user == tuser.id) {
                await click.remove();
                res.json({ msg: "Post Removed" });
            }
            else {
                res.json({ msg: "You cannot remove this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            if (click.user == tuser.id) {
                await clickPost.findByIdAndUpdate(req.params.id, req.body, { useFindAndModify: false });
                res.json({ msg: "Post Updated" });
            }
            else {
                res.json({ msg: "You cannot update this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
clickRouter.route('/like/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            if (click.likes.filter((like) => like.user.toString() === req.payload.id).length > 0) {
                return res.status(400).json({ msg: "Post already liked" });
            }
            else {
                click.likes.unshift({ user: req.payload.id });
                await (click === null || click === void 0 ? void 0 : click.save());
                res.json({ msg: "post liked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
clickRouter.route('/unlike/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            if (click.likes.filter((like) => like.user.toString() === req.payload.id).length === 0) {
                return res.status(400).json({ msg: "Post has not yet been liked" });
            }
            else {
                const removeIndex = click.likes
                    .map((like) => like.user.toString())
                    .indexOf(req.payload.id);
                click === null || click === void 0 ? void 0 : click.likes.splice(removeIndex, 1);
                await (click === null || click === void 0 ? void 0 : click.save());
                res.json({ msg: "post unliked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
clickRouter.route('/comment/:id')
    .post(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            const newComment = {
                time: Date.now(),
                text: req.body.text,
                name: tuser === null || tuser === void 0 ? void 0 : tuser.username,
                user: req.payload.id,
            };
            click === null || click === void 0 ? void 0 : click.comments.unshift(newComment);
            await click.save();
            res.json(click.comments);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
clickRouter.route('/comment/:id/:comment_id')
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await clickPost.findById(req.params.id)
            .then(async (click) => {
            const comment = click === null || click === void 0 ? void 0 : click.comments.find((comment) => comment.id === req.params.comment_id);
            if (!comment) {
                return res.sendStatus(404);
            }
            if (comment.user.toString() !== req.payload.id) {
                return res.sendStatus(401);
            }
            click.comments = click.comments.filter(({ id }) => id !== req.params.comment_id);
            await click.save();
            return res.json({ msg: "comment deleted" });
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
module.exports = clickRouter;
//# sourceMappingURL=data:application/json;base64,