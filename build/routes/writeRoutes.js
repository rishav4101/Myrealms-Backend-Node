"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const { check, validationResult } = require("express-validator");
const writePost = require("../models/writePost");
const writeRouter = express_1.default.Router();
const auth = require('../middlewares/auth');
const Users = require('../models/user');
writeRouter.route('/')
    .get(auth.required, async (req, res, next) => {
    try {
        await writePost.find({})
            .then((writes) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(writes);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .post(auth.required, async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    try {
        const newPost = new writePost({
            user: req.payload.id,
            description: req.body.description,
            title: req.body.title,
            img: req.body.img,
            time: Date.now(),
        });
        const post = await newPost.save();
        res.json(post);
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
writeRouter.route('/:id')
    .get(auth.required, async (req, res, next) => {
    try {
        await writePost.findById(req.params.id)
            .then((write) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(write);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            if (write.user == tuser.id) {
                await write.remove();
                res.json({ msg: "Post Removed" });
            }
            else {
                res.json({ msg: "You cannot remove this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            if (write.user == tuser.id) {
                await writePost.findByIdAndUpdate(req.params.id, req.body, { useFindAndModify: false });
                res.json({ msg: "Post Updated" });
            }
            else {
                res.json({ msg: "You cannot update this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
writeRouter.route('/like/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            if (write.likes.filter((like) => like.user.toString() === req.payload.id).length > 0) {
                return res.status(400).json({ msg: "Post already liked" });
            }
            else {
                write.likes.unshift({ user: req.payload.id });
                await (write === null || write === void 0 ? void 0 : write.save());
                res.json({ msg: "post liked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
writeRouter.route('/unlike/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            if (write.likes.filter((like) => like.user.toString() === req.payload.id).length === 0) {
                return res.status(400).json({ msg: "Post has not yet been liked" });
            }
            else {
                const removeIndex = write.likes
                    .map((like) => like.user.toString())
                    .indexOf(req.payload.id);
                write === null || write === void 0 ? void 0 : write.likes.splice(removeIndex, 1);
                await (write === null || write === void 0 ? void 0 : write.save());
                res.json({ msg: "post unliked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
writeRouter.route('/comment/:id')
    .post(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            const newComment = {
                time: Date.now(),
                text: req.body.text,
                name: tuser === null || tuser === void 0 ? void 0 : tuser.username,
                user: req.payload.id,
            };
            write === null || write === void 0 ? void 0 : write.comments.unshift(newComment);
            await write.save();
            res.json(write.comments);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
writeRouter.route('/comment/:id/:comment_id')
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await writePost.findById(req.params.id)
            .then(async (write) => {
            const comment = write === null || write === void 0 ? void 0 : write.comments.find((comment) => comment.id === req.params.comment_id);
            if (!comment) {
                return res.sendStatus(404);
            }
            if (comment.user.toString() !== req.payload.id) {
                return res.sendStatus(401);
            }
            write.comments = write.comments.filter(({ id }) => id !== req.params.comment_id);
            await write.save();
            return res.json({ msg: "comment deleted" });
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
module.exports = writeRouter;
//# sourceMappingURL=data:application/json;base64,