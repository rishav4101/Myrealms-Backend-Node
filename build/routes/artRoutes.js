"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const { check, validationResult } = require("express-validator");
const artPost = require("../models/artPost");
const artRouter = express_1.default.Router();
var fs = require('fs');
const auth = require('../middlewares/auth');
const Users = require('../models/user');
artRouter.route('/')
    .get(auth.required, async (req, res, next) => {
    try {
        await artPost.find({})
            .then((arts) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(arts);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .post(auth.required, async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    try {
        const newPost = new artPost({
            user: req.payload.id,
            description: req.body.description,
            title: req.body.title,
            time: Date.now(),
            img: req.body.img,
        });
        const post = await newPost.save();
        res.json(post);
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
artRouter.route('/:id')
    .get(auth.required, async (req, res, next) => {
    try {
        await artPost.findById(req.params.id)
            .then((art) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(art);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            if (art.user == tuser.id) {
                await art.remove();
                res.json({ msg: "Post Removed" });
            }
            else {
                res.json({ msg: "You cannot remove this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            if (art.user == tuser.id) {
                await artPost.findByIdAndUpdate(req.params.id, req.body, { useFindAndModify: false });
                res.json({ msg: "Post Updated" });
            }
            else {
                res.json({ msg: "You cannot update this post" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
artRouter.route('/like/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            if (art.likes.filter((like) => like.user.toString() === req.payload.id).length > 0) {
                return res.status(400).json({ msg: "Post already liked" });
            }
            else {
                art.likes.unshift({ user: req.payload.id });
                await (art === null || art === void 0 ? void 0 : art.save());
                res.json({ msg: "post liked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
artRouter.route('/unlike/:id')
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            if (art.likes.filter((like) => like.user.toString() === req.payload.id).length === 0) {
                return res.status(400).json({ msg: "Post has not yet been liked" });
            }
            else {
                const removeIndex = art.likes
                    .map((like) => like.user.toString())
                    .indexOf(req.payload.id);
                art === null || art === void 0 ? void 0 : art.likes.splice(removeIndex, 1);
                await (art === null || art === void 0 ? void 0 : art.save());
                res.json({ msg: "post unliked" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
artRouter.route('/comment/:id')
    .post(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            const newComment = {
                time: Date.now(),
                text: req.body.text,
                name: tuser === null || tuser === void 0 ? void 0 : tuser.username,
                user: req.payload.id,
            };
            art === null || art === void 0 ? void 0 : art.comments.unshift(newComment);
            await art.save();
            res.json(art.comments);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
artRouter.route('/comment/:id/:comment_id')
    .delete(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await artPost.findById(req.params.id)
            .then(async (art) => {
            const comment = art === null || art === void 0 ? void 0 : art.comments.find((comment) => comment.id === req.params.comment_id);
            if (!comment) {
                return res.sendStatus(404);
            }
            if (comment.user.toString() !== req.payload.id) {
                return res.sendStatus(401);
            }
            art.comments = art.comments.filter(({ id }) => id !== req.params.comment_id);
            await art.save();
            return res.json({ msg: "comment deleted" });
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
module.exports = artRouter;
//# sourceMappingURL=data:application/json;base64,