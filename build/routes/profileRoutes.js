"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const { check, validationResult } = require("express-validator");
const profile = require("../models/profile");
const profileRouter = express_1.default.Router();
const auth = require('../middlewares/auth');
profileRouter.route('/')
    .post(auth.required, async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    try {
        const newProfile = new profile({
            user: req.payload.id,
            fullname: req.body.fullname,
            bio: req.body.bio,
            img: req.body.img,
        });
        const profil = await newProfile.save();
        res.json(profil);
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
profileRouter.route('/:id')
    .get(auth.required, async (req, res, next) => {
    try {
        await profile.findById(req.params.id)
            .then((prof) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(prof);
        })
            .catch((err) => {
            next(err);
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
})
    .put(auth.required, async (req, res, next) => {
    try {
        const tuser = await Users.findById(req.payload.id);
        await profile.findById(req.params.id)
            .then(async (prof) => {
            if (prof.user == tuser.id) {
                await profile.findByIdAndUpdate(req.params.id, req.body, { useFindAndModify: false });
                res.json({ msg: "Profile Updated" });
            }
            else {
                res.json({ msg: "You cannot update this profile" });
            }
        });
    }
    catch (err) {
        console.error(err.message);
        res.sendStatus(500);
    }
});
module.exports = profileRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZVJvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvcHJvZmlsZVJvdXRlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUc5QixNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDakUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDN0MsTUFBTSxhQUFhLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUV2QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ3JCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN6RDtJQUNELElBQUk7UUFFQSxNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sQ0FBQztZQUUzQixJQUFJLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3BCLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDM0IsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNqQixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FFcEI7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdkI7QUFDTCxDQUFDLENBQUMsQ0FBQTtBQUVGLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0tBRTFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ3pDLElBQUk7UUFDSixNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7YUFDcEMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDWCxHQUFHLENBQUMsVUFBVSxHQUFDLEdBQUcsQ0FBQztZQUNuQixHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2pELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQTtLQUNEO0lBQUMsT0FBTSxHQUFHLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQyxDQUFDO0tBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekMsSUFBSTtRQUVKLE1BQU0sS0FBSyxHQUFHLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRWxELE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUVwQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBRWpCLElBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUN0QixNQUFNLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUMsZ0JBQWdCLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQTtnQkFFbEYsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDeEM7aUJBQ0k7Z0JBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7YUFDdkQ7UUFDTCxDQUFDLENBQUMsQ0FBQTtLQUNEO0lBQUMsT0FBTSxHQUFHLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQyxDQUFDLENBQUE7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XHJcblxyXG4vL0B0cy1pZ25vcmVcclxuY29uc3QgeyBjaGVjaywgdmFsaWRhdGlvblJlc3VsdCB9ID0gcmVxdWlyZShcImV4cHJlc3MtdmFsaWRhdG9yXCIpO1xyXG5jb25zdCBwcm9maWxlID0gcmVxdWlyZShcIi4uL21vZGVscy9wcm9maWxlXCIpO1xyXG5jb25zdCBwcm9maWxlUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbmNvbnN0IGF1dGggPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlcy9hdXRoJyk7XHJcbi8vIGNvbnN0IFVzZXJzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3VzZXInKTtcclxuXHJcbnByb2ZpbGVSb3V0ZXIucm91dGUoJy8nKVxyXG4vL0B0cy1pZ25vcmVcclxuLnBvc3QoYXV0aC5yZXF1aXJlZCwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0KHJlcSk7XHJcbiAgICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3JzOiBlcnJvcnMuYXJyYXkoKSB9KTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVxKTtcclxuICAgICAgICBjb25zdCBuZXdQcm9maWxlID0gbmV3IHByb2ZpbGUoe1xyXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgdXNlcjogcmVxLnBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIGZ1bGxuYW1lOiByZXEuYm9keS5mdWxsbmFtZSxcclxuICAgICAgICAgICAgYmlvOiByZXEuYm9keS5iaW8sXHJcbiAgICAgICAgICAgIGltZzogcmVxLmJvZHkuaW1nLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IHByb2ZpbCA9IGF3YWl0IG5ld1Byb2ZpbGUuc2F2ZSgpO1xyXG4gICAgICAgIHJlcy5qc29uKHByb2ZpbCk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgIH1cclxufSlcclxuXHJcbnByb2ZpbGVSb3V0ZXIucm91dGUoJy86aWQnKVxyXG4vL0B0cy1pZ25vcmVcclxuLmdldChhdXRoLnJlcXVpcmVkLCBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIHRyeSB7IFxyXG4gICAgYXdhaXQgcHJvZmlsZS5maW5kQnlJZChyZXEucGFyYW1zLmlkKVxyXG4gICAgLnRoZW4oKHByb2YpID0+IHtcclxuICAgICAgICByZXMuc3RhdHVzQ29kZT0yMDA7XHJcbiAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgICAgIHJlcy5qc29uKHByb2YpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgbmV4dChlcnIpO1xyXG4gICAgfSlcclxuICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgIH1cclxufSlcclxuLy9AdHMtaWdub3JlXHJcbi5wdXQoYXV0aC5yZXF1aXJlZCwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBjb25zdCB0dXNlciA9IGF3YWl0IFVzZXJzLmZpbmRCeUlkKHJlcS5wYXlsb2FkLmlkKVxyXG4gICAgXHJcbiAgICBhd2FpdCBwcm9maWxlLmZpbmRCeUlkKHJlcS5wYXJhbXMuaWQpXHJcbiAgICAvL0B0cy1pZ25vcmVcclxuICAgIC50aGVuKGFzeW5jIChwcm9mKSA9PiB7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgaWYocHJvZi51c2VyID09IHR1c2VyLmlkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHByb2ZpbGUuZmluZEJ5SWRBbmRVcGRhdGUocmVxLnBhcmFtcy5pZCwgcmVxLmJvZHksIHt1c2VGaW5kQW5kTW9kaWZ5OmZhbHNlfSlcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbXNnOiBcIlByb2ZpbGUgVXBkYXRlZFwiIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbXNnOiBcIllvdSBjYW5ub3QgdXBkYXRlIHRoaXMgcHJvZmlsZVwiIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICB9IGNhdGNoKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJlcy5zZW5kU3RhdHVzKDUwMCk7XHJcbiAgICB9XHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHByb2ZpbGVSb3V0ZXI7Il19