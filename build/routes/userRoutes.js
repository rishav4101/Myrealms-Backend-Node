"use strict";
const passport = require('passport');
const userRouter = require('express').Router();
const auth = require('../middlewares/auth');
const Users = require('../models/user');
userRouter.post('/', auth.optional, async (req, res, next) => {
    const { body: { user } } = req;
    if (!user.email) {
        return res.status(422).json({
            errors: {
                email: 'is required',
            },
        });
    }
    if (!user.password) {
        return res.status(422).json({
            errors: {
                password: 'is required',
            },
        });
    }
    const finalUser = new Users(user);
    finalUser.setPassword(user.password);
    return finalUser.save()
        .then(() => res.json({ user: finalUser.toAuthJSON() }))
        .catch((err) => { console.log(err); });
});
userRouter.post('/login', auth.optional, async (req, res, next) => {
    const { body: { user } } = req;
    if (!user.email) {
        return res.status(422).json({
            errors: {
                email: 'is required',
            },
        });
    }
    if (!user.password) {
        return res.status(422).json({
            errors: {
                password: 'is required',
            },
        });
    }
    return passport.authenticate('local', { session: false }, (err, passportUser, info) => {
        if (err) {
            return next(err);
        }
        if (passportUser) {
            const user = passportUser;
            user.token = passportUser.generateJWT();
            return res.json({ user: user.toAuthJSON() });
        }
        return status(400).info;
    })(req, res, next);
});
userRouter.get('/current', auth.required, (req, res, next) => {
    const { payload: { id } } = req;
    return Users.findById(id)
        .then((user) => {
        if (!user) {
            return res.sendStatus(400);
        }
        return res.json({ user: user.toAuthJSON() });
    });
});
module.exports = userRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlclJvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvdXNlclJvdXRlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMvQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM1QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUl4QyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQzNELE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUUvQixJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxhQUFhO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLE1BQU0sRUFBRTtnQkFDTixRQUFRLEVBQUUsYUFBYTthQUN4QjtTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFO1NBR3RCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdEQsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFHSCxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ2hFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUUvQixJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxhQUFhO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLE1BQU0sRUFBRTtnQkFDTixRQUFRLEVBQUUsYUFBYTthQUN4QjtTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDcEYsSUFBRyxHQUFHLEVBQUU7WUFDTixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUVELElBQUcsWUFBWSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXhDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUM7QUFJSCxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUUzRCxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFFaEMsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUN0QixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNiLElBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDUixPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcbmNvbnN0IHBhc3Nwb3J0ID0gcmVxdWlyZSgncGFzc3BvcnQnKTtcclxuY29uc3QgdXNlclJvdXRlciA9IHJlcXVpcmUoJ2V4cHJlc3MnKS5Sb3V0ZXIoKTtcclxuY29uc3QgYXV0aCA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmVzL2F1dGgnKTtcclxuY29uc3QgVXNlcnMgPSByZXF1aXJlKCcuLi9tb2RlbHMvdXNlcicpO1xyXG5cclxuLy9QT1NUIG5ldyB1c2VyIHJvdXRlIChvcHRpb25hbCwgZXZlcnlvbmUgaGFzIGFjY2VzcylcclxuLy9AdHMtaWdub3JlXHJcbnVzZXJSb3V0ZXIucG9zdCgnLycsIGF1dGgub3B0aW9uYWwsIGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIGNvbnN0IHsgYm9keTogeyB1c2VyIH0gfSA9IHJlcTtcclxuXHJcbiAgaWYoIXVzZXIuZW1haWwpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQyMikuanNvbih7XHJcbiAgICAgIGVycm9yczoge1xyXG4gICAgICAgIGVtYWlsOiAnaXMgcmVxdWlyZWQnLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpZighdXNlci5wYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDIyKS5qc29uKHtcclxuICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgcGFzc3dvcmQ6ICdpcyByZXF1aXJlZCcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGZpbmFsVXNlciA9IG5ldyBVc2Vycyh1c2VyKTtcclxuICAvL0B0cy1pZ25vcmVcclxuICBmaW5hbFVzZXIuc2V0UGFzc3dvcmQodXNlci5wYXNzd29yZCk7XHJcbiAgcmV0dXJuIGZpbmFsVXNlci5zYXZlKClcclxuXHJcbiAgLy9AdHMtaWdub3JlXHJcbiAgLnRoZW4oKCkgPT4gcmVzLmpzb24oeyB1c2VyOiBmaW5hbFVzZXIudG9BdXRoSlNPTigpIH0pKVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7Y29uc29sZS5sb2coZXJyKX0pO1xyXG59KTtcclxuXHJcbi8vUE9TVCBsb2dpbiByb3V0ZSAob3B0aW9uYWwsIGV2ZXJ5b25lIGhhcyBhY2Nlc3MpXHJcbnVzZXJSb3V0ZXIucG9zdCgnL2xvZ2luJywgYXV0aC5vcHRpb25hbCwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgY29uc3QgeyBib2R5OiB7IHVzZXIgfSB9ID0gcmVxO1xyXG5cclxuICBpZighdXNlci5lbWFpbCkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDIyKS5qc29uKHtcclxuICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgZW1haWw6ICdpcyByZXF1aXJlZCcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmKCF1c2VyLnBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MjIpLmpzb24oe1xyXG4gICAgICBlcnJvcnM6IHtcclxuICAgICAgICBwYXNzd29yZDogJ2lzIHJlcXVpcmVkJyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuICAgLy9AdHMtaWdub3JlXHJcbiAgcmV0dXJuIHBhc3Nwb3J0LmF1dGhlbnRpY2F0ZSgnbG9jYWwnLCB7IHNlc3Npb246IGZhbHNlIH0sIChlcnIsIHBhc3Nwb3J0VXNlciwgaW5mbykgPT4ge1xyXG4gICAgaWYoZXJyKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYocGFzc3BvcnRVc2VyKSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBwYXNzcG9ydFVzZXI7XHJcbiAgICAgIHVzZXIudG9rZW4gPSBwYXNzcG9ydFVzZXIuZ2VuZXJhdGVKV1QoKTtcclxuXHJcbiAgICAgIHJldHVybiByZXMuanNvbih7IHVzZXI6IHVzZXIudG9BdXRoSlNPTigpIH0pO1xyXG4gICAgfVxyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICByZXR1cm4gc3RhdHVzKDQwMCkuaW5mbztcclxuICB9KShyZXEsIHJlcywgbmV4dCk7XHJcbn0pO1xyXG5cclxuLy9HRVQgY3VycmVudCByb3V0ZSAocmVxdWlyZWQsIG9ubHkgYXV0aGVudGljYXRlZCB1c2VycyBoYXZlIGFjY2VzcylcclxuLy9AdHMtaWdub3JlXHJcbnVzZXJSb3V0ZXIuZ2V0KCcvY3VycmVudCcsIGF1dGgucmVxdWlyZWQsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgY29uc3QgeyBwYXlsb2FkOiB7IGlkIH0gfSA9IHJlcTtcclxuXHJcbiAgcmV0dXJuIFVzZXJzLmZpbmRCeUlkKGlkKVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYoIXVzZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnNlbmRTdGF0dXMoNDAwKTtcclxuICAgICAgfVxyXG4gICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdXNlcjogdXNlci50b0F1dGhKU09OKCkgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHVzZXJSb3V0ZXI7Il19