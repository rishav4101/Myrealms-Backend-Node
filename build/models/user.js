"use strict";
const mongoose = require('mongoose');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const { Schema } = mongoose;
const UsersSchema = new Schema({
    email: {
        type: String,
        required: true,
        unique: true,
    },
    username: {
        type: String,
        required: true,
        unique: true,
    },
    hash: String,
    salt: String,
});
UsersSchema.methods.setPassword = function (password) {
    this.salt = crypto.randomBytes(16).toString('hex');
    this.hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');
};
UsersSchema.methods.validatePassword = function (password) {
    const hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');
    return this.hash === hash;
};
UsersSchema.methods.generateJWT = function () {
    const today = new Date();
    const expirationDate = new Date(today);
    expirationDate.setDate(today.getDate() + 60);
    return jwt.sign({
        email: this.email,
        id: this._id,
        exp: parseInt(expirationDate.getTime() / 1000, 10),
    }, 'secret');
};
UsersSchema.methods.toAuthJSON = function () {
    return {
        _id: this._id,
        email: this.email,
        username: this.username,
        token: this.generateJWT(),
    };
};
const user = mongoose.model('Users', UsersSchema);
module.exports = user;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvdXNlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFcEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztBQUU1QixNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQztJQUM3QixLQUFLLEVBQUU7UUFDTCxJQUFJLEVBQUUsTUFBTTtRQUNaLFFBQVEsRUFBRSxJQUFJO1FBQ2QsTUFBTSxFQUFFLElBQUk7S0FDYjtJQUNELFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLElBQUk7UUFDZCxNQUFNLEVBQUUsSUFBSTtLQUNiO0lBQ0QsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsTUFBTTtDQUNiLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLFVBQVMsUUFBUTtJQUNqRCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzRixDQUFDLENBQUM7QUFFRixXQUFXLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLFVBQVMsUUFBUTtJQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFGLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBRUYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUc7SUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN6QixNQUFNLGNBQWMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUU3QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDcEIsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHO1FBRVQsR0FBRyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUNuRCxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2YsQ0FBQyxDQUFBO0FBRUQsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7SUFDL0IsT0FBTztRQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztRQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztRQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7UUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7S0FDMUIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcclxuY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XHJcblxyXG5jb25zdCB7IFNjaGVtYSB9ID0gbW9uZ29vc2U7XHJcblxyXG5jb25zdCBVc2Vyc1NjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gIGVtYWlsOiB7XHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgIHVuaXF1ZTogdHJ1ZSxcclxuICB9LFxyXG4gIHVzZXJuYW1lOiB7XHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgIHVuaXF1ZTogdHJ1ZSxcclxuICB9LFxyXG4gIGhhc2g6IFN0cmluZyxcclxuICBzYWx0OiBTdHJpbmcsXHJcbn0pO1xyXG4vL0B0cy1pZ25vcmVcclxuVXNlcnNTY2hlbWEubWV0aG9kcy5zZXRQYXNzd29yZCA9IGZ1bmN0aW9uKHBhc3N3b3JkKSB7XHJcbiAgdGhpcy5zYWx0ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnaGV4Jyk7XHJcbiAgdGhpcy5oYXNoID0gY3J5cHRvLnBia2RmMlN5bmMocGFzc3dvcmQsIHRoaXMuc2FsdCwgMTAwMDAsIDUxMiwgJ3NoYTUxMicpLnRvU3RyaW5nKCdoZXgnKTtcclxufTtcclxuLy9AdHMtaWdub3JlXHJcblVzZXJzU2NoZW1hLm1ldGhvZHMudmFsaWRhdGVQYXNzd29yZCA9IGZ1bmN0aW9uKHBhc3N3b3JkKSB7XHJcbiAgY29uc3QgaGFzaCA9IGNyeXB0by5wYmtkZjJTeW5jKHBhc3N3b3JkLCB0aGlzLnNhbHQsIDEwMDAwLCA1MTIsICdzaGE1MTInKS50b1N0cmluZygnaGV4Jyk7XHJcbiAgcmV0dXJuIHRoaXMuaGFzaCA9PT0gaGFzaDtcclxufTtcclxuXHJcblVzZXJzU2NoZW1hLm1ldGhvZHMuZ2VuZXJhdGVKV1QgPSBmdW5jdGlvbigpIHtcclxuICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgZXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZSh0b2RheSk7XHJcbiAgZXhwaXJhdGlvbkRhdGUuc2V0RGF0ZSh0b2RheS5nZXREYXRlKCkgKyA2MCk7XHJcblxyXG4gIHJldHVybiBqd3Quc2lnbih7XHJcbiAgICBlbWFpbDogdGhpcy5lbWFpbCxcclxuXHRpZDogdGhpcy5faWQsXHJcblx0Ly9AdHMtaWdub3JlXHJcbiAgICBleHA6IHBhcnNlSW50KGV4cGlyYXRpb25EYXRlLmdldFRpbWUoKSAvIDEwMDAsIDEwKSxcclxuICB9LCAnc2VjcmV0Jyk7XHJcbn1cclxuXHJcblVzZXJzU2NoZW1hLm1ldGhvZHMudG9BdXRoSlNPTiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBfaWQ6IHRoaXMuX2lkLFxyXG4gICAgZW1haWw6IHRoaXMuZW1haWwsXHJcbiAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcclxuICAgIHRva2VuOiB0aGlzLmdlbmVyYXRlSldUKCksXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IHVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcnMnLCBVc2Vyc1NjaGVtYSk7XHJcbm1vZHVsZS5leHBvcnRzID0gdXNlclxyXG4iXX0=